// routes/login.js
const express = require("express");
const router = express.Router();
const { chromium } = require("playwright");
const launchOptions = {
  headless: false,
  args: [
      await page.getByRole("button", { name: "Add room" }).click();
  console.log("‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Add room ‡πÅ‡∏•‡πâ‡∏ß");

  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ popup ‡∏Ç‡∏∂‡πâ‡∏ô
  await page.waitForSelector('div[role="dialog"], div._exadr_c.scrollContainer', {
    timeout: 15000,
  }).catch(() => {
    throw new Error("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô popup ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á");
  });

  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏™‡∏î‡∏á "Finding rooms‚Ä¶"
  await waitUntilRoomsAreLoaded(page);,
    "--disable-setuid-sandbox",
    "--disable-blink-features=AutomationControlled",
    "--disable-infobars",
    "--start-maximized",
  ],
};

router.get("/", async (req, res) => {
  let browser = null;
  try {
    browser = await chromium.launch(launchOptions);
    const context = await browser.newContext({
      userAgent:
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/115.0.0.0 Safari/537.36",
      viewport: { width: 1280, height: 800 },
      locale: "en-US",
      permissions: ["notifications"],
    });
    const page = await context.newPage();
    await evadeDetection(page);

    await page.goto(
      "https://amecoutlook.mitsubishielevatorasia.co.th/owa/auth/logon.aspx?"
    );

    await page.fill(
      'input[name="username"]',
      "kanittha@MitsubishiElevatorAsia.co.th"
    );
    await page.fill('input[name="password"]', "ISdell11P@ssw0rd");
    await page.click("text=Sign in");
    await page.waitForNavigation();

    await page.click(
      'button[aria-label="Open the app launcher to access your Office 365 apps"]'
    );
    await page.waitForSelector("a#O365_AppTile_ShellCalendar");
    await page.click("a#O365_AppTile_ShellCalendar");
    await page.waitForURL(/\/calendar/);
    await page.waitForTimeout(3000);

    await page.getByRole("button", { name: "New" }).click();
    await page.waitForSelector(
      'input[placeholder="Add a title for the event"]'
    );
    await page.fill(
      'input[placeholder="Add a title for the event"]',
      "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ A"
    );

    await page.click('button[aria-label^="start date"]');
    const startPopupId = await page.getAttribute(
      'button[aria-label^="start date"]',
      "aria-owns"
    );
    await selectDateWithMonthYear(page, startPopupId, 2025, 7, 26);
    await page.fill('input[aria-label="start time"]', "09:30 AM");

    await page.click('button[aria-label^="end date"]');
    const endPopupId = await page.getAttribute(
      'button[aria-label^="end date"]',
      "aria-owns"
    );
    await selectDateWithMonthYear(page, endPopupId, 2025, 7, 26);
    await page.fill('input[aria-label="end time"]', "10:30 AM");

    await page.click(
      'input[aria-labelledby="MeetingCompose.LocationInputLabel"]'
    );
    await selectRoom(page, "EP Fueangfa Room");

    const attendees = [
      "kanittha@MitsubishiElevatorAsia.co.th",
      "chalorms@MitsubishiElevatorAsia.co.th",
    ];

    for (const email of attendees) {
      const input = page.getByRole("textbox", { name: "Add people" });
      await input.click();
      await input.fill(email);
      await page.waitForTimeout(1000);
      await page.keyboard.press("Enter");
      await page.waitForTimeout(500);
    }

    await page.getByRole("button", { name: "Send" }).click();
    console.log("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");

    await logoutFromOutlook(page);
    await browser.close();
    console.log("‚úÖ ‡∏õ‡∏¥‡∏î browser ‡πÅ‡∏•‡πâ‡∏ß");
    
    res.json({ success: true, message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
    
    // ‡∏õ‡∏¥‡∏î browser ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à
    if (browser) {
      try {
        await browser.close();
        console.log("‚úÖ ‡∏õ‡∏¥‡∏î browser ‡∏à‡∏≤‡∏Å error handling");
      } catch (closeErr) {
        console.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î browser ‡πÑ‡∏î‡πâ:", closeErr.message);
      }
    }
    
    res.status(500).json({ success: false, error: err.message });
  }
});

async function evadeDetection(page) {
  await page.addInitScript(() => {
    Object.defineProperty(navigator, "webdriver", {
      get: () => false,
    });

    window.chrome = {
      runtime: {},
    };

    Object.defineProperty(navigator, "plugins", {
      get: () => [1, 2, 3],
    });

    Object.defineProperty(navigator, "languages", {
      get: () => ["en-US", "en"],
    });
  });
}

async function selectDateWithMonthYear(
  page,
  calendarPopupId,
  targetYear,
  targetMonth,
  targetDay
) {
  const monthYearSelector = `#${calendarPopupId} button._dx_g`;
  const nextButtonSelector = `#${calendarPopupId} button._dx_k`;
  const prevButtonSelector = `#${calendarPopupId} button._dx_l`;

  const parseMonthYear = (text) => {
    const [monthName, yearStr] = text.split(" ");
    const monthNames = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ];
    return {
      monthNum: monthNames.indexOf(monthName) + 1,
      yearNum: parseInt(yearStr),
    };
  };

  await page.waitForSelector(monthYearSelector);
  let currentMonthYear = await page.locator(monthYearSelector).innerText();
  let { monthNum, yearNum } = parseMonthYear(currentMonthYear);

  while (yearNum !== targetYear || monthNum !== targetMonth) {
    if (
      yearNum > targetYear ||
      (yearNum === targetYear && monthNum > targetMonth)
    ) {
      await page.click(prevButtonSelector);
    } else {
      await page.click(nextButtonSelector);
    }
    await page.waitForTimeout(500);
    currentMonthYear = await page.locator(monthYearSelector).innerText();
    ({ monthNum, yearNum } = parseMonthYear(currentMonthYear));
  }

  const dayCell = page.locator(`#${calendarPopupId} abbr`, {
    hasText: String(targetDay),
  });
  await dayCell.first().click({ force: true });
}

async function selectRoom(page, roomName) {
  await page.getByRole("button", { name: "Add room" }).click();
  console.log("‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Add room ‡πÅ‡∏•‡πâ‡∏ß");

  // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ popup ‡∏Ç‡∏∂‡πâ‡∏ô
  //   await page
  //     .waitForSelector('div[role="dialog"], div._exadr_c.scrollContainer', {
  //       timeout: 15000,
  //     })
  //     .catch(() => {
  //       throw new Error("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô popup ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á");
  //     });

  // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏™‡∏î‡∏á ‚ÄúFinding rooms‚Ä¶‚Äù
  await waitUntilRoomsAreLoaded(page);

  // ‚úÖ ‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î container ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
  const container = page.locator("div._exadr_c.scrollContainer");
  await container.waitFor({ state: "attached", timeout: 10000 });

  const allRooms = await page.locator("span._exadr_r").allTextContents();
  console.log("üìù ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", allRooms.join("|"));

  await container.evaluate((el) => (el.scrollTop = el.scrollHeight));
  await page.waitForTimeout(2000);

  const targetRoom = page
    .locator("span._exadr_r", { hasText: roomName })
    .first();
  if ((await targetRoom.count()) === 0) {
    const allRooms = await page.locator("span._exadr_r").allTextContents();
    console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á "${roomName}" ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:`, allRooms);
    throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á ${roomName} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`);
  }

  await targetRoom.scrollIntoViewIfNeeded();
  await targetRoom.click();
  console.log(`‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡πâ‡∏≠‡∏á "${roomName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
}

async function logoutFromOutlook(page) {
  try {
    await page.click('button[aria-label*="menu with submenu"]');
    await page.waitForTimeout(1000);
    const signOutButton = page.getByRole("menuitem", { name: "Sign out" });
    await signOutButton.waitFor({ state: "visible", timeout: 5000 });
    await signOutButton.click();
    await signOutButton.waitFor({ state: "detached", timeout: 5000 });
  } catch (err) {
    console.error("‚ö†Ô∏è Logout Failed:", err.message);
  }
}

async function waitUntilRoomsAreLoaded(page) {
  console.log("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à...");
  const locator = page.locator("span._fce_7._fce_8", {
    hasText: "Finding rooms...",
  });

  const timeout = 20000;
  const interval = 500;
  const maxAttempts = timeout / interval;

  for (let i = 0; i < maxAttempts; i++) {
    const isHidden = await locator.evaluateAll((els) => {
      if (els.length === 0) return true; // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏•‡∏¢ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
      const style = window.getComputedStyle(els[0]);
      return style.display === "none";
    });

    if (isHidden) {
      console.log("‚úÖ ‡∏´‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
      return;
    }

    await page.waitForTimeout(interval);
  }

  console.warn("‚ö†Ô∏è ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÅ‡∏ï‡πà 'Finding rooms...' ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ã‡πà‡∏≠‡∏ô");
}

module.exports = router;
